# -*- coding: utf-8 -*-
"""Analysis_of_Spanish_apartments.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JTwixR3jsoOFOTCJ3c47d-J2UDgEWVfZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data = pd.read_csv('pisos.csv')

data

data.info()

data.isnull().sum()

missing_percentage = (data.isnull().sum() / len(data)) * 100
print(missing_percentage)

import re
def extract_price(price_str):
  if isinstance(price_str, str):
    price_str = re.sub(r'[^\d.]', '', price_str)
    try:
      return float(price_str)
    except ValueError:
      return None
  return price_str
print(data.columns)
print(data.price)

data['price'] = data['price'].apply(extract_price)

print("Sample values in the 'price' column:")
print(data['price'].head())

from sklearn.impute import KNNImputer

data = data.dropna(subset=['description'])

data['price/m2'] = pd.to_numeric(data['price/m2'], errors='coerce')
data['rooms'] = pd.to_numeric(data['rooms'], errors='coerce')
data['bathrooms'] = pd.to_numeric(data['bathrooms'], errors='coerce')
data['size'] = pd.to_numeric(data['size'], errors='coerce')
data['Num Photos'] = pd.to_numeric(data['Num Photos'], errors='coerce')

data['price'] = data['price'].fillna(data['price/m2'].median())
data['rooms'].fillna(data['rooms'].median())
data['bathrooms'].fillna(data['bathrooms'].median())

data['location'] = data['location'].fillna(data['location'].mode()[0])
data['photo'] = data['photo'].fillna(data['photo'].mode()[0])
data['Num Photos'] = data['Num Photos'].fillna(data['Num Photos'].median())
data['type'] = data['type'].fillna(data['type'].mode()[0])
data['region'] = data['region'].fillna(data['region'].mode()[0])


if 'recomendado' in data.columns:
    data = data.drop(columns=['recomendado'])
    print("'recomendado' column has been removed.")
else:
    print("'recomendado' not found in columns.")

imputer = KNNImputer(n_neighbors=5)
data[['price/m2', 'price', 'size']] = imputer.fit_transform(data[['price/m2', 'price', 'size']])

data.to_csv('processed_data.csv', index=False)

print(data.isnull().sum())

data

plt.figure(figsize=(12, 6))
sns.histplot(data['price'], bins=30, kde=True, color='skyblue', label='Price Distribution')
plt.title('Price Distribution')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.legend(title='Legend')
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(x='rooms', y='price', data=data,  hue='price_category', palette='Set2', dodge=True)
plt.title('Price by Number of Rooms')
plt.xlabel('Number of Rooms')
plt.ylabel('Price')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()

def price_category(price):
  if price < data['price'].median():
    return 'Low Price'
  elif price < data['price'].quantile(0.75):
    return 'Medium Price'
  else:
    return 'High Price'

data['price_category'] = data['price'].apply(price_category)
handles = [plt.Line2D([0], [0], color=color, lw=4) for color in sns.color_palette('Set2', 3)]
labels = ['Low Price', 'Medium Price', 'High Price']  # Customize labels as needed
plt.legend(handles, labels, title='Price Range', loc='upper right')
plt.show()

plt.figure(figsize=(12, 6))
average_price_by_type = data.groupby('type')['price'].mean().sort_values()
sns.barplot(x=average_price_by_type.index, y=average_price_by_type.values, color='skyblue', label='Average Price')
plt.title('Average Price by Property Type')
plt.xlabel('Property Type')
plt.ylabel('Average Price')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.legend(title='Legend')
plt.show()